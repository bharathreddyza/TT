{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","VideoSidebar","likes","shares","comments","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","current","pause","play","muted","loop","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAKe,SAASA,EAAT,GAAsD,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC1D,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,mBACb,gCAAMH,GACN,2BAAIC,GACJ,yBAAKE,UAAU,qBACb,kBAAC,IAAD,CAAeA,UAAU,oBACzB,kBAAC,IAAD,CAAQC,KAAK,WACV,cAAGC,MAAH,OACC,6BACE,2BAAIH,SAMd,yBACEC,UAAU,sBACVG,IAAI,0D,8EClBG,SAASC,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EACtCC,oBAAS,GAD6B,mBACzDC,EADyD,KAClDC,EADkD,KAEhE,OACE,yBAAKV,UAAU,gBACb,yBAAKA,UAAU,sBACZS,EACC,kBAAC,IAAD,CAAcE,SAAS,QAAQC,QAAS,SAACC,GAAD,OAAOH,GAAS,MAExD,kBAAC,IAAD,CACEC,SAAS,QACTC,QAAS,SAACC,GAAD,OAAOH,GAAS,MAG7B,2BAAID,EAAQJ,EAAQ,EAAIA,IAE1B,yBAAKL,UAAU,sBACb,kBAAC,IAAD,CAAaW,SAAS,UACtB,2BAAIJ,IAEN,yBAAKP,UAAU,sBACb,kBAAC,IAAD,CAAWW,SAAS,UACpB,2BAAIL,EAAJ,OCQOQ,MA/Bf,YAA8E,IAA7DC,EAA4D,EAA5DA,IAAKlB,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,KAAMM,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAAY,EAC7CC,oBAAS,GADoC,mBACpEQ,EADoE,KAC3DC,EAD2D,KAErEC,EAAWC,iBAAO,MAYxB,OACE,yBAAKnB,UAAU,SACb,2BACEY,QAbmB,WAEnBI,GACFE,EAASE,QAAQC,QACjBJ,GAAW,KAEXC,EAASE,QAAQE,OACjBL,GAAW,KAOTM,OAAK,EACLC,MAAI,EACJC,IAAKP,EACLlB,UAAU,eACVG,IAAKY,IAGP,kBAAC,EAAD,CAAalB,QAASA,EAASC,YAAaA,EAAaC,KAAMA,IAC/D,kBAAC,EAAD,CAAcM,MAAOA,EAAOC,OAAQA,EAAQC,SAAUA,MCkB7CmB,MA7Cf,WACE,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEe,IAAI,+CACJV,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVV,QAAQ,UACRC,YAAY,kBACZC,KAAK,YAEP,kBAAC,EAAD,CACEgB,IAAI,+CACJV,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVV,QAAQ,UACRC,YAAY,kBACZC,KAAK,YAEP,kBAAC,EAAD,CACEgB,IAAI,+CACJV,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVV,QAAQ,UACRC,YAAY,kBACZC,KAAK,YAEP,kBAAC,EAAD,CACEgB,IAAI,+CACJV,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVV,QAAQ,UACRC,YAAY,kBACZC,KAAK,eC7BK4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7ee0b50.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./VideoFooter.css\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport Ticker from \"react-ticker\";\n\nexport default function VideoFooter({ channel, description, song }) {\n  return (\n    <div className=\"videoFooter\">\n      <div className=\"videoFooterText\">\n        <h3>@{channel}</h3>\n        <p>{description}</p>\n        <div className=\"videoFooterTicker\">\n          <MusicNoteIcon className=\"videoFooterIcon\" />\n          <Ticker mode=\"smooth\">\n            {({ index }) => (\n              <div>\n                <p>{song}</p>\n              </div>\n            )}\n          </Ticker>\n        </div>\n      </div>\n      <img\n        className=\"videoFooterRecorder\"\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./VideoSidebar.css\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport MessageIcon from \"@material-ui/icons/Message\";\nimport FavoriteborderIcon from \"@material-ui/icons/FavoriteBorder\";\nexport default function VideoSidebar({ likes, shares, comments }) {\n  const [liked, setLiked] = useState(false);\n  return (\n    <div className=\"videoSidebar\">\n      <div className=\"videoSidebarButton\">\n        {liked ? (\n          <FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(false)} />\n        ) : (\n          <FavoriteborderIcon\n            fontSize=\"large\"\n            onClick={(e) => setLiked(true)}\n          />\n        )}\n        <p>{liked ? likes + 1 : likes}</p>\n      </div>\n      <div className=\"videoSidebarButton\">\n        <MessageIcon fontSize=\"large\" />\n        <p>{comments}</p>\n      </div>\n      <div className=\"videoSidebarButton\">\n        <ShareIcon fontSize=\"large\" />\n        <p>{shares}}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport \"./video.css\";\nimport VideoFooter from \"./VideoFooter\";\nimport VideoSidebar from \"./VideoSidebar\";\nfunction Video({ url, channel, description, song, likes, shares, comments }) {\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef(null);\n\n  const handleVideoPress = () => {\n    //if video is playing -> stop\n    if (playing) {\n      videoRef.current.pause();\n      setPlaying(false);\n    } else {\n      videoRef.current.play();\n      setPlaying(true);\n    }\n  };\n  return (\n    <div className=\"video\">\n      <video\n        onClick={handleVideoPress}\n        muted\n        loop\n        ref={videoRef}\n        className=\"video-player\"\n        src={url}\n      />\n\n      <VideoFooter channel={channel} description={description} song={song} />\n      <VideoSidebar likes={likes} shares={shares} comments={comments} />\n    </div>\n  );\n}\n\nexport default Video;\n","import React from \"react\";\nimport \"./App.css\";\nimport Video from \"./Video\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-videos\">\n        <Video\n          url=\"http://clips.vorwaerts-gmbh.de/VfE_html5.mp4\"\n          likes={100}\n          shares={13}\n          comments={35}\n          channel=\"bharath\"\n          description=\"bla bla bka abk\"\n          song=\"dreamer\"\n        />\n        <Video\n          url=\"http://clips.vorwaerts-gmbh.de/VfE_html5.mp4\"\n          likes={100}\n          shares={13}\n          comments={35}\n          channel=\"bharath\"\n          description=\"bla bla bka abk\"\n          song=\"dreamer\"\n        />\n        <Video\n          url=\"http://clips.vorwaerts-gmbh.de/VfE_html5.mp4\"\n          likes={100}\n          shares={13}\n          comments={35}\n          channel=\"bharath\"\n          description=\"bla bla bka abk\"\n          song=\"dreamer\"\n        />\n        <Video\n          url=\"http://clips.vorwaerts-gmbh.de/VfE_html5.mp4\"\n          likes={100}\n          shares={13}\n          comments={35}\n          channel=\"bharath\"\n          description=\"bla bla bka abk\"\n          song=\"dreamer\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}